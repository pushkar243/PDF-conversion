import camelot

# Path to your PDF file
pdf_path = "path/to/your/document.pdf"
markdown_content = ""

# Extract tables from the PDF using Camelot
tables = camelot.read_pdf(pdf_path, pages="all", flavor="stream")  # 'lattice' for bordered tables

for table_num, table in enumerate(tables):
    markdown_content += f"## Table {table_num + 1}\n\n"
    
    # Convert the table to a Pandas DataFrame
    df = table.df
    
    # Generate Markdown header and separator line
    header_row = "| " + " | ".join(str(column) for column in df.columns) + " |\n"
    separator_row = "| " + " | ".join("---" for _ in df.columns) + " |\n"
    markdown_content += header_row + separator_row
    
    # Generate table rows
    for _, row in df.iterrows():
        # Convert each cell to a string and replace any newlines with spaces
        markdown_row = "| " + " | ".join(str(cell).replace("\n", " ") for cell in row) + " |\n"
        markdown_content += markdown_row
    
    markdown_content += "\n"  # Separate tables with a newline

# Save the combined content to a Markdown file
output_file = "output_tab

***********07-11

import fitz  # PyMuPDF
import camelot
from markdownify import markdownify as md

# Path to your PDF file
pdf_path = "path/to/your/document.pdf"
markdown_content = ""

# Step 1: Extract text content from the PDF pages using PyMuPDF
with fitz.open(pdf_path) as pdf_document:
    for page_num in range(pdf_document.page_count):
        page = pdf_document[page_num]
        
        # Extract text using the 'blocks' method to maintain some layout
        page_text_blocks = page.get_text("blocks")
        markdown_content += f"# Page {page_num + 1}\n\n"
        
        for block in page_text_blocks:
            text_block = block[4]  # The fifth element contains the actual text
            if text_block.strip():
                markdown_block = md(text_block)
                markdown_content += markdown_block + "\n\n"

# Step 2: Extract tables from the PDF pages using Camelot
tables = camelot.read_pdf(pdf_path, pages="all", flavor="stream")  # 'stream' or 'lattice' depending on the table type

for table_num, table in enumerate(tables):
    markdown_content += f"## Table {table_num + 1}\n\n"
    
    # Convert the table to a Pandas DataFrame and then to Markdown
    df = table.df
    markdown_table = df.to_markdown(index=False)  # Convert DataFrame to Markdown format
    markdown_content += markdown_table + "\n\n"

# Step 3: Save the combined text and table content to a Markdown file
output_file = "combined_output.md"
with open(output_file, "w", encoding="utf-8") as md_file:
    md_file.write(markdown_content)

print(f"PDF content (text and tables) extracted and saved as '{output_file}'")

###############################################################################################


Using camelot

import camelot

# Path to your PDF file
pdf_path = "path/to/your/document.pdf"
markdown_content = ""

# Extract tables from the PDF
tables = camelot.read_pdf(pdf_path, pages="all", flavor="stream")  # 'stream' works well with table lines; use 'lattice' for bordered tables

# Iterate over each table extracted by camelot
for table_num, table in enumerate(tables):
    markdown_content += f"## Table {table_num + 1}\n\n"
    
    # Convert the table to a Pandas DataFrame
    df = table.df  # DataFrame structure makes it easier to manipulate
    
    # Convert DataFrame to Markdown format
    markdown_table = df.to_markdown(index=False)  # Exclude row index for cleaner output
    markdown_content += markdown_table + "\n\n"

# Save the content to a Markdown file
output_file = "output_tables_markdown.md"
with open(output_file, "w", encoding="utf-8") as md_file:
    md_file.write(markdown_content)

print(f"Tables from PDF extracted and saved as '{output_file}' in Markdown format")
------------------------------------------------------------------------------------------------------------------------------

import fitz  # PyMuPDF
import pdfplumber
from markdownify import markdownify as md

# Path to your PDF file
pdf_path = "path/to/your/document.pdf"
markdown_content = ""

# Step 1: Extract text content from the PDF pages
with fitz.open(pdf_path) as pdf_document:
    for page_num in range(pdf_document.page_count):
        page = pdf_document[page_num]
        page_text = page.get_text("html")
        page_markdown = md(page_text)
        markdown_content += f"# Page {page_num + 1}\n\n" + page_markdown + "\n\n"

# Step 2: Extract tables from the PDF pages
with pdfplumber.open(pdf_path) as pdf:
    for page_num, page in enumerate(pdf.pages):
        tables = page.extract_tables()
        
        for table_num, table in enumerate(tables):
            markdown_content += f"## Table on Page {page_num + 1} - Table {table_num + 1}\n\n"

            # Determine max number of columns for consistent formatting
            max_cols = max(len(row) for row in table)
            
            # Add Markdown headers and separator based on max columns
            header_row = "| " + " | ".join(f"Column {i+1}" for i in range(max_cols)) + " |\n"
            separator_row = "| " + " | ".join("---" for _ in range(max_cols)) + " |\n"
            markdown_content += header_row + separator_row
            
            # Process each row, padding with empty cells if necessary
            for row in table:
                # Pad row to max_cols length
                padded_row = row + [""] * (max_cols - len(row))
                markdown_content += "| " + " | ".join(str(cell) if cell is not None else "" for cell in padded_row) + " |\n"
            
            markdown_content += "\n"  # Separate tables

# Step 3: Save the content to a Markdown file
output_file = "output_with_tables.md"
with open(output_file, "w", encoding="utf-8") as md_file:
    md_file.write(markdown_content)

print(f"PDF with tables converted to Markdown and saved as '{output_file}'")
